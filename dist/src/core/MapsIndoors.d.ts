import { MPMapStyle, MPLocation, MPSolution, MPVenue, MPQuery, MPFilter, MPDisplayRule, MPSolutionDisplayRule, MPPositionProviderInterface, MPUserRole, MPCategoryCollection, MPUserRoleCollection } from "../../index";
import MPBuildingCollection from './MPBuildingCollection';
import MPVenueCollection from './MPVenueCollection';
export default class MapsIndoors {
    private constructor();
    static load(apiKey: String, venues?: String[]): Promise<void>;
    static getDefaultVenue(): Promise<MPVenue | undefined>;
    static getVenues(): Promise<MPVenueCollection>;
    static getBuildings(): Promise<MPBuildingCollection>;
    static getCategories(): Promise<MPCategoryCollection>;
    static getLocations(): Promise<MPLocation[]>;
    static disableEventLogging(disable: boolean): Promise<void>;
    static getApiKey(): Promise<string>;
    static getAvailableLanguages(): Promise<string[]>;
    static getDefaultLanguage(): Promise<string>;
    static getLanguage(): Promise<string>;
    static getLocationById(id: string): Promise<MPLocation | undefined>;
    static getLocationsByExternalIds(externalIds: string[]): Promise<MPLocation[]>;
    static getMapStyles(): Promise<MPMapStyle[]>;
    static getSolution(): Promise<MPSolution>;
    static getLocationsAsync(query: MPQuery, filter: MPFilter): Promise<MPLocation[]>;
    static getDisplayRuleByLocation(location: MPLocation): Promise<MPDisplayRule | undefined>;
    static getDisplayRuleByName(name: string): Promise<MPDisplayRule>;
    static getMainDisplayRule(): Promise<MPDisplayRule>;
    static getSolutionDisplayRule(solutionDisplayRule: MPSolutionDisplayRule): Promise<MPDisplayRule>;
    static getDefaultDisplayRule(): Promise<MPDisplayRule>;
    static setPositionProvider(positonProvider?: MPPositionProviderInterface): Promise<void>;
    static getUserRoles(): Promise<MPUserRoleCollection>;
    static checkOfflineDataAvailability(): Promise<boolean>;
    static destroy(): Promise<void>;
    static isApiKeyValid(): Promise<boolean>;
    static isInitialized(): Promise<boolean>;
    static isReady(): Promise<boolean>;
    static setLanguage(language: string): Promise<boolean>;
    static synchronizeContent(): Promise<void>;
    static applyUserRoles(userRoles: MPUserRole[]): Promise<void>;
    static getAppliedUserRoles(): Promise<MPUserRole[]>;
    static addVenuesToSync(venues: string[]): Promise<void>;
    static removeVenuesToSync(venues: string[]): Promise<void>;
    static getSyncedVenues(): Promise<string[]>;
}
