import { NativeEventEmitter } from 'react-native';
import { MPFilter, MPFilterBehavior, MPLocation, MPMapConfig, MPFloorSelectorInterface, MPSelectionBehavior, MPFloor, MPVenue, MPBuilding, OnMapClickListener, MPCameraEventListener, OnFloorUpdateListener, OnLocationSelectedListener, OnVenueFoundAtCameraTargetListener, OnBuildingFoundAtCameraTargetListener, OnMarkerClickListener, OnMarkerInfoWindowClickListener, OnLiveLocationUpdateListener, MPMapStyle, MPCameraUpdate, MPCameraPosition, MPEntity } from "../../index";
import MPHighlightBehavior from './MPHighlightBehavior';
import { MPSelectionMode } from './MPSelectionMode';
import { MPFeatureType } from './MPFeatureTypes';
export default class MapControl {
    private constructor();
    private floorSelector?;
    private eventEmitter?;
    private onMapClickSub?;
    private onLocationSelectedSub?;
    private onCurrentVenueChangedSub?;
    private onCurrentBuildingChangedSub?;
    private onMarkerClickSub?;
    private onMarkerInfoWindowClickSub?;
    private onCameraEventSubs;
    private onFloorUpdateSubs;
    private onLiveUpdateSubs;
    static create(config: MPMapConfig, nativeEventEmitter: typeof NativeEventEmitter): Promise<MapControl>;
    private onFloorSelectionChanged;
    selectVenue(venue: MPVenue, moveCamera: boolean): Promise<void>;
    getCurrentVenue(): Promise<MPVenue | undefined>;
    getCurrentBuilding(): Promise<MPBuilding | undefined>;
    selectBuilding(building: MPBuilding, moveCamera: boolean): Promise<void>;
    selectLocation(location: MPLocation, behavior: MPSelectionBehavior): Promise<void>;
    selectLocation(id: string, behavior: MPSelectionBehavior): Promise<void>;
    clearFilter(): Promise<void>;
    setFilter(locations: MPLocation[], filterBehavior: MPFilterBehavior): Promise<boolean>;
    setFilter(filter: MPFilter, filterBehavior: MPFilterBehavior): Promise<boolean>;
    setHighlight(locations: MPLocation[], highlightBehavior: MPHighlightBehavior): Promise<void>;
    clearHighlight(): Promise<void>;
    goTo(entity: MPEntity): Promise<void>;
    setMapPadding(start: number, top: number, end: number, bottom: number): Promise<void>;
    getMapViewPaddingStart(): Promise<number>;
    getMapViewPaddingTop(): Promise<number>;
    getMapViewPaddingEnd(): Promise<number>;
    getMapViewPaddingBottom(): Promise<number>;
    setMapStyle(style: MPMapStyle): Promise<void>;
    getMapStyle(): Promise<MPMapStyle | undefined>;
    showInfoWindowOnClickedLocation(show: boolean): Promise<void>;
    deSelectLocation(): Promise<void>;
    getCurrentBuildingFloor(): Promise<MPFloor | undefined>;
    getCurrentFloorIndex(): Promise<number>;
    getCurrentMapsIndoorsZoom(): Promise<number>;
    selectFloor(floorIndex: number): Promise<void>;
    isFloorSelectorHidden(): Promise<boolean>;
    hideFloorSelector(hide: boolean): Promise<void>;
    setFloorSelector(floorSelector?: MPFloorSelectorInterface): Promise<void>;
    private setupFloorSelector;
    private teardownFloorSelector;
    showUserPosition(show: boolean): Promise<void>;
    isUserPositionShown(): Promise<boolean>;
    enableLiveData(domainType: string, listener?: OnLiveLocationUpdateListener): Promise<void>;
    private addLiveDataListener;
    disableLiveData(domainType: string): Promise<void>;
    private removeLiveDataListener;
    animateCamera(update: MPCameraUpdate, duration?: number): Promise<void>;
    moveCamera(update: MPCameraUpdate): Promise<void>;
    getCurrentCameraPosition(): Promise<MPCameraPosition>;
    setOnMapClickListener(listener?: OnMapClickListener, consumeEvent?: boolean): void;
    setOnLocationSelectedListener(listener?: OnLocationSelectedListener, consumeEvent?: boolean): void;
    setOnCurrentVenueChangedListener(listener?: OnVenueFoundAtCameraTargetListener): void;
    setOnCurrentBuildingChangedListener(listener?: OnBuildingFoundAtCameraTargetListener): void;
    setOnMarkerClickListener(listener?: OnMarkerClickListener, consumeEvent?: boolean): void;
    setOnMarkerInfoWindowClickListener(listener?: OnMarkerInfoWindowClickListener): void;
    addOnCameraEventListener(listener: MPCameraEventListener): void;
    removeOnCameraEventListener(listener: MPCameraEventListener): void;
    addOnFloorUpdateListener(listener: OnFloorUpdateListener): void;
    removeOnFloorUpdateListener(listener: OnFloorUpdateListener): void;
    setLabelOptions(textSize?: number, color?: String, showHalo?: boolean): Promise<void>;
    setBuildingSelectionMode(selectionMode: MPSelectionMode): Promise<void>;
    getBuildingSelectionMode(): Promise<MPSelectionMode>;
    setFloorSelectionMode(selectionMode: MPSelectionMode): Promise<void>;
    getFloorSelectionMode(): Promise<MPSelectionMode>;
    setHiddenFeatures(features: MPFeatureType[]): Promise<void>;
    getHiddenFeatures(): Promise<MPFeatureType[]>;
}
