import { MPIconSize } from "../../index";
import { MPIconPlacement } from './MPIconPlacement';
import { MPLabelType } from './MPLabelType';
import { MPBadgePosition } from './MPBadgePosition';
import MPLabelGraphic from './MPLabelGraphic';
export default class MPDisplayRule {
    readonly id: string;
    private constructor();
    static create(object?: any): MPDisplayRule;
    isVisible(): Promise<boolean>;
    setVisible(visible: boolean): Promise<void>;
    isIconVisible(): Promise<boolean>;
    setIconVisible(iconVisible: boolean): Promise<void>;
    isPolygonVisible(): Promise<boolean>;
    setPolygonVisible(polygonVisible: boolean): Promise<void>;
    isLabelVisible(): Promise<boolean>;
    setLabelVisible(labelVisible: boolean): Promise<void>;
    isModel2DVisible(): Promise<boolean>;
    setModel2DVisible(model2DVisible: boolean): Promise<void>;
    isWallVisible(): Promise<boolean>;
    setWallVisible(wallVisible: boolean): Promise<void>;
    isExtrusionVisible(): Promise<boolean>;
    setExtrusionVisible(extrusionVisible: boolean): Promise<void>;
    getZoomFrom(): Promise<number>;
    setZoomFrom(zoomFrom: number): Promise<void>;
    getZoomTo(): Promise<number>;
    setZoomTo(zoomTo: number): Promise<void>;
    getIconUrl(): Promise<string>;
    setIcon(iconUrl: string): Promise<void>;
    getIconSize(): Promise<MPIconSize>;
    setIconSize(iconSize: MPIconSize): Promise<void>;
    getLabel(): Promise<string>;
    setLabel(label: string): Promise<void>;
    getLabelZoomFrom(): Promise<number>;
    setLabelZoomFrom(zoomFrom: number): Promise<void>;
    getLabelZoomTo(): Promise<number>;
    setLabelZoomTo(zoomTo: number): Promise<void>;
    getLabelMaxWidth(): Promise<number>;
    setLabelMaxWidth(labelMaxWidth: number): Promise<void>;
    getPolygonZoomFrom(): Promise<number>;
    setPolygonZoomFrom(polygonZoomFrom: number): Promise<void>;
    getPolygonZoomTo(): Promise<number>;
    setPolygonZoomTo(polygonZoomTo: number): Promise<void>;
    getPolygonStrokeWidth(): Promise<number>;
    setPolygonStrokeWidth(strokeWidth: number): Promise<void>;
    getPolygonStrokeColor(): Promise<string>;
    setPolygonStrokeColor(strokeColor: string): Promise<void>;
    getPolygonStrokeOpacity(): Promise<number>;
    setPolygonStrokeOpacity(strokeOpacity: number): Promise<void>;
    getPolygonFillOpacity(): Promise<number>;
    setPolygonFillOpacity(fillOpacity: number): Promise<void>;
    getPolygonFillColor(): Promise<string>;
    setPolygonFillColor(fillColor: string): Promise<void>;
    getWallColor(): Promise<string>;
    setWallColor(wallColor: string): Promise<void>;
    getWallHeight(): Promise<number>;
    setWallHeight(wallHeight: number): Promise<void>;
    getWallZoomFrom(): Promise<number>;
    setWallZoomFrom(wallZoomFrom: number): Promise<void>;
    getWallZoomTo(): Promise<number>;
    setWallZoomTo(wallZoomTo: number): Promise<void>;
    getExtrusionColor(): Promise<string>;
    setExtrusionColor(extrusionColor: string): Promise<void>;
    getExtrusionHeight(): Promise<number>;
    setExtrusionHeight(extrusionHeight: number): Promise<void>;
    getExtrusionZoomFrom(): Promise<number>;
    setExtrusionZoomFrom(extrusionZoomFrom: number): Promise<void>;
    getExtrusionZoomTo(): Promise<number>;
    setExtrusionZoomTo(extrusionZoomTo: number): Promise<void>;
    getModel2DZoomFrom(): Promise<number>;
    setModel2DZoomFrom(zoomFrom: number): Promise<void>;
    getModel2DZoomTo(): Promise<number>;
    setModel2DZoomTo(zoomTo: number): Promise<void>;
    getModel2DModel(): Promise<string>;
    setModel2DModel(url: string): Promise<void>;
    getModel2DWidthMeters(): Promise<number>;
    setModel2DWidthMeters(width: number): Promise<void>;
    getModel2DHeightMeters(): Promise<number>;
    setModel2DHeightMeters(height: number): Promise<void>;
    getModel2DBearing(): Promise<number>;
    setModel2DBearing(bearing: number): Promise<void>;
    getIconScale(): Promise<number>;
    setIconScale(iconScale: number): Promise<void>;
    getIconPlacement(): Promise<MPIconPlacement>;
    setIconPlacement(iconPlacement: MPIconPlacement): Promise<void>;
    getLabelType(): Promise<MPLabelType>;
    setLabelType(labelType: MPLabelType): Promise<void>;
    getLabelStyleTextSize(): Promise<number>;
    setLabelStyleTextSize(textSize: number): Promise<void>;
    getLabelStyleTextColor(): Promise<string>;
    setLabelStyleTextColor(textColor: String): Promise<void>;
    getLabelStyleTextOpacity(): Promise<number>;
    setLabelStyleTextOpacity(textOpacity: number): Promise<void>;
    getLabelStyleHaloColor(): Promise<string>;
    setLabelStyleHaloColor(color: string): Promise<void>;
    getLabelStyleHaloWidth(): Promise<number>;
    setLabelStyleHaloWidth(haloWidth: number): Promise<void>;
    getLabelStyleHaloBlur(): Promise<number>;
    setLabelStyleHaloBlur(haloBlur: number): Promise<void>;
    getLabelStyleBearing(): Promise<number>;
    setLabelStyleBearing(bearing: number): Promise<void>;
    setLabelStyleGraphic(graphicLabel: MPLabelGraphic): Promise<void>;
    getLabelStyleGraphic(): Promise<MPLabelGraphic>;
    getPolygonLightnessFactor(): Promise<number>;
    setPolygonLightnessFactor(lightnessFactor: number): Promise<void>;
    getWallLightnessFactor(): Promise<number>;
    setWallLightnessFactor(lightnessFactor: number): Promise<void>;
    getExtrusionLightnessFactor(): Promise<number>;
    setExtrusionLightnessFactor(lightnessFactor: number): Promise<void>;
    isBadgeVisible(): Promise<boolean>;
    setBadgeVisible(visible: boolean): Promise<void>;
    getBadgeZoomFrom(): Promise<number>;
    setBadgeZoomFrom(zoomFrom: number): Promise<void>;
    getBadgeZoomTo(): Promise<number>;
    setBadgeZoomTo(zoomTo: number): Promise<void>;
    getBadgeRadius(): Promise<number>;
    setBadgeRadius(radius: number): Promise<void>;
    getBadgeStrokeWidth(): Promise<number>;
    setBadgeStrokeWidth(strokeWidth: number): Promise<void>;
    getBadgeStrokeColor(): Promise<string>;
    setBadgeStrokeColor(strokeColor: string): Promise<void>;
    getBadgeFillColor(): Promise<string>;
    setBadgeFillColor(fillColor: string): Promise<void>;
    getBadgeScale(): Promise<number>;
    setBadgeScale(badgeScale: number): Promise<void>;
    getBadgePosition(): Promise<MPBadgePosition>;
    setBadgePosition(badgePosition: MPBadgePosition): Promise<void>;
    getModel3DModel(): Promise<string>;
    setModel3DModel(url: string): Promise<void>;
    getModel3DRotationX(): Promise<number>;
    setModel3DRotationX(rotationX: number): Promise<void>;
    getModel3DRotationY(): Promise<number>;
    setModel3DRotationY(rotationY: number): Promise<void>;
    getModel3DRotationZ(): Promise<number>;
    setModel3DRotationZ(rotationZ: number): Promise<void>;
    getModel3DScale(): Promise<number>;
    setModel3DScale(scale: number): Promise<void>;
    getModel3DZoomFrom(): Promise<number>;
    setModel3DZoomFrom(zoomFrom: number): Promise<void>;
    getModel3DZoomTo(): Promise<number>;
    setModel3DZoomTo(zoomTo: number): Promise<void>;
    isModel3DVisible(): Promise<boolean>;
    setModel3DVisible(visible: boolean): Promise<void>;
    reset(): Promise<void>;
}
